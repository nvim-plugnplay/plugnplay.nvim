* Simple things
  - Better format for `command` lazy-loading
  -- Regex (perhaps not possible)
  -- Things like: `NvimTree{Open,Close,Toggle}`
  - Option to follow latest release tag
  - Optional dependencies (lazy-loaded until needed by plugin)
  - Option to "force-pull" on update (can handle rebases)
  - Bootstrap plugnplay if not found
  - See diff of files when updating
  - Easy way to revert an update
  - Function to check if/how many updates are available
  - Temporary plugins/easy way to install and remove (no need to comment, clean and compile like in
    packer) for testing out new plugins
  ~~ Select plugin you want to install
  ~~ Test it out
  ~~ Decide if you want to keep it (will be added to `cfg` automatically)
  - Support disabling plugin by filetype (also enabling, like some plugins do rn but some don't)

* Big Features
 ** Modules
    Modules provide an OOTB experience for more than one plugin.
    Multiple plugins will automatically installed and configured. The configuration is exposed so
    users can modify only specific parts of it (don't have to do /everything/ themself).
    Examples for modules could be:
    - Completion and Snippets: nvim-cmp, lua-snip, cmp sources, snippet sources and config to set up
      cmp with luasnip as source. This would for example expose the mapping to expose snippets
      (expose everything but this is sth users would likely configure)
    - Lsp and Diagnostics: nvim-lspconfig with setup for some popular servers, nice config for
      diagnostics etc, plugins for better code actions, references etc
 ** `load` for lazy-loading
    This is a table which can be in every plugin config. It has similar keys to the ones
    that packer has.
    For example:
    - `command`: load the plugin when using a certain command
    - `event`: load the plugin on a certain autocmd event
    - `maps`: load the plugin when keys are used
    - `condition`: load the plugin when the provided function returns `true`
